# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- For Korean input in React, use onCompositionStart/End events to prevent character separation during IME input
- **Node.js 16에서 Neon PostgreSQL 사용 시 fetch 에러 발생**: Node.js 16에서는 fetch가 기본 지원되지 않아 Neon serverless 패키지 사용 시 에러 발생. Node.js 18 이상 필요.
- **PL/pgSQL DO $$ 블록과 세미콜론 분리 문제**: DO $$ 블록은 하나의 완전한 문이므로 세미콜론으로 분리하면 안 됨. 개별 SQL 문으로 작성하고 각각 try-catch로 처리하는 것이 안전.
- **tailwind-variants 사용법**: 조건부 스타일링에서 문자열 보간 및 삼항 연산자 대신 tv 함수를 사용하면 더 깔끔하고 유지보수하기 쉬운 코드 작성 가능. base 스타일과 variants 정의를 분리하여 타입 안전성과 가독성 향상.
- **스마트 알림 시스템 구현**: 활동 주기별 맞춤형 알림 정책 설계 시 각 주기(일/주/월/분기/년)별로 다른 임계값 적용. 일단위는 당일 23시, 주/월/분기/년 단위는 주기의 80-95% 경과 시 알림 발송.
- **푸시 알림 사용자 ID 타입 불일치 문제**: 스마트 알림 시스템에서 user_id를 문자열로 변환하여 알림 생성하지만, 푸시 서비스에서 구독 정보 매칭 시 타입 불일치로 실패. String() 변환을 통한 안전한 비교로 해결.

# Scratchpad

## Current Task: LastMoveCard 위험도 색상 시스템 애니메이션 추가

**Task Overview:**
LastMoveCard.tsx 컴포넌트의 위험도 색상 시스템에 애니메이션 효과 추가
- 매우 위험한 수준(text-red-700)에 pulse 애니메이션 적용 ✅
- 극도로 위험한 수준(text-red-800)에 glow 애니메이션 적용 ✅
- **안전/주의 레벨에 산뜻한 애니메이션 추가** (진행 중)
- TailwindCSS 애니메이션 클래스 활용
- 사용자 경험 개선을 위한 시각적 강조 효과

**추가 작업 - 안전/주의 레벨 애니메이션:**
[X] 1. 안전 레벨 (text-green-600) 산뜻한 애니메이션 설계
[X] 2. 주의 레벨 (text-yellow-500) 부드러운 애니메이션 설계
[X] 3. 쉐도우 없는 순수한 애니메이션 구현
[X] 4. LastMoveCard.tsx 적용 및 테스트

**전체 구현 완료 ✅**
- **안전 레벨**: `text-green-600 safe-glow` 적용
  - 부드러운 초록색 glow 효과 (bounce 애니메이션 제거)
- **주의 레벨**: `text-yellow-500 caution-glow` 적용
  - 부드러운 노랑색 glow 효과 (wiggle 애니메이션 제거)
- **매우 위험**: `text-red-700 animate-pulse` 적용 (glow 제거)
- **극도로 위험**: `text-red-800 animate-pulse` 적용 (glow 제거)
- **globals.css**: 새로운 glow 효과 클래스 추가
  - `.safe-glow`: 초록색 glow 효과
  - `.caution-glow`: 노랑색 glow 효과
  - `.danger-glow`, `.extreme-danger-glow`: 쉐도우 제거
- **접근성 지원**: `prefers-reduced-motion` 미디어 쿼리로 glow 효과 비활성화

**최종 애니메이션 효과:**
- **안전**: 초록색 glow 효과 (산뜻한 빛남)
- **주의**: 노랑색 glow 효과 (부드러운 빛남)
- **위험**: 단순 Pulse 애니메이션 (쉐도우 제거)
- **극도 위험**: 단순 Pulse 애니메이션 (쉐도우 제거)
- **산뜻하고 긍정적인 느낌**: 안전/주의 레벨 glow 효과
- **성능 최적화**: 가벼운 glow 효과와 pulse 애니메이션

## Previous Tasks (완료됨)

### 스마트 알림 시스템 구현 ✅
### GlobalNav 상단 고정 및 Apple Glass UI 효과 구현 ✅
### 활동 주기 기능 구현 ✅
### 푸시 알림 구독 저장 ON CONFLICT 에러 수정 ✅
### PWA 스플래시 화면 구현 ✅
### Sentry 로깅 시스템 구축 ✅
### FrequencySelector 컴포넌트 조건부 스타일 tailwind-variants로 변경 ✅
### 활동 주기별 위험도 평가 시스템 구현 ✅
### ActivityEditForm Select 컴포넌트 카테고리 표시 문제 해결 ✅
### Sheet 닫기 시 Edit 모드 상태 초기화 ✅